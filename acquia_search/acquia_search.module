<?php

/**
 * @file
 * Integration between Acquia Drupal and Acquia's hosted solr search service.
 */

use Drupal\acquia_connector\Helper\Storage;
use Drupal\search_api\Entity\Server;
use Drupal\search_api\Entity\Index;
use Drupal\Core\Entity\EntityInterface;
use Drupal\acquia_connector\Subscription;
use Drupal\acquia_search\PreferredSearchCoreService;
use Drupal\Core\Render\Markup;

define('ACQUIA_SEARCH_OVERRIDE_AUTO_SET', 1);
define('ACQUIA_SEARCH_AUTO_OVERRIDE_READ_ONLY', 2);
define('ACQUIA_SEARCH_EXISTING_OVERRIDE', 3);

/**
 * Implements hook_acquia_subscription_status().
 */
function acquia_search_acquia_subscription_status($subscription = FALSE) {
  if (!empty($subscription['active'])) {
    // Refresh the salt with the subscription data returned by the heartbeat
    // since it can change periodically.
    $salt = \Drupal::config('acquia_search.settings')->get('derived_key_salt');
    if (isset($subscription['derived_key_salt']) && $salt != $subscription['derived_key_salt']) {
      \Drupal::configFactory()->getEditable('acquia_search.settings')
        ->set('derived_key_salt', $subscription['derived_key_salt'])
        ->save();
    }

    // Enable search.
    /** @var \Drupal\search_api\Entity\Server $server */
    if ($server = Server::load('acquia_search_server')) {
      $server->set('status', TRUE);
      $server->save();
    }

    /** @var \Drupal\search_api\Entity\Index $index */
    if ($index = Index::load('acquia_search_index')) {
      $index->set('status', TRUE);
      $index->save();
    }
  }
  elseif (is_int($subscription)) {
    // @todo: Maybe we don't want to switch off search/index because there could
    // be an override in place. But perhaps we need to log it or show a message.
    switch ($subscription) {
      case Subscription::NOT_FOUND:
      case Subscription::EXPIRED:
        // Disable search.
        /** @var \Drupal\search_api\Entity\Server $server */
        if ($server = Server::load('acquia_search_server')) {
          $server->set('status', FALSE);
          $server->save();
        }
        /** @var \Drupal\search_api\Entity\Index $index */
        if ($index = Index::load('acquia_search_index')) {
          $index->set('status', FALSE);
          $index->save();
        }
        break;
    }
  }
}

/**
 * Acquia Search helper function. Returns search host.
 *
 * @param array $subscription
 *   Acquia Subscription.
 *
 * @return string
 *   Search server url.
 */
function acquia_search_get_search_host($subscription = array()) {
  if (empty($subscription)) {
    $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');
  }

  $search_host = \Drupal::config('acquia_search.settings')->get('host');
  // Adding the subscription specific colony to the heartbeat data.
  if (!empty($subscription['heartbeat_data']['search_service_colony'])) {
    $search_host = $subscription['heartbeat_data']['search_service_colony'];
  }
  // Check if we are on Acquia Cloud hosting. @see NN-2503.
  if (!empty($_ENV['AH_SITE_ENVIRONMENT']) && !empty($_ENV['AH_CURRENT_REGION'])) {
    if ($_ENV['AH_CURRENT_REGION'] == 'us-east-1' && $search_host == 'search.acquia.com') {
      $search_host = 'internal-search.acquia.com';
    }
    elseif (strpos($search_host, 'search-' . $_ENV['AH_CURRENT_REGION']) === 0) {
      $search_host = 'internal-' . $search_host;
    }
  }
  return $search_host;
}

/**
 * Implements hook_entity_operation_alter().
 *
 * Don't allow delete default server and index.
 */
function acquia_search_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if (empty($operations['delete'])) {
    return;
  }
  $do_not_delete = [
    'acquia_search_server',
    'acquia_search_index',
  ];
  if (array_search($entity->id(), $do_not_delete) !== FALSE) {
    unset($operations['delete']);
  }
}

function acquia_search_is_connection_config_overridden() {
  $overrides = \Drupal::config('acquia_search.settings')->get('connection_override');

  if (!$overrides) {
    return FALSE;
  }

  $is_overridden_and_valid =
    !empty($overrides['host']) &&
    !empty($overrides['index_id']) &&
    !empty($overrides['derived_key']);

  if ($is_overridden_and_valid) {
    return TRUE;
  }

  \Drupal::logger('acquia search')->notice("Invalid config override detected for
   acquia_search.settings.connection_override. It should include host, index_id
   and derived_key.");

  return FALSE;
}

/**
 * Determine if we should enforce read-only mode.
 *
 * @return bool
 */
function acquia_search_should_set_read_only_mode() {

  if (acquia_search_is_connection_config_overridden()) {
    return FALSE;
  }

  // If we have overrides switching off any of the major behaviors, don't
  //   auto-enforce read_only mode.
  $auto_switch_disabled = \Drupal::config('acquia_search.settings')->get('disable_auto_switch');
  $disable_auto_read_only = \Drupal::config('acquia_search.settings')->get('disable_auto_read_only');
  if ($auto_switch_disabled || $disable_auto_read_only) {
    return FALSE;
  }

  // If subscription is expired, then DO enforce read-only mode.
  $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');
  $sub_active = !empty($subscription['active']);
  if (!$sub_active) {
    return TRUE;
  }

  // If there is no preferred core, then DO enforce read_only mode
  $core_service = acquia_search_get_core_service();
  if (!$core_service->isPreferredCoreAvailable()) {
    return TRUE;
  }

  // We got here! So we're probably safe to NOT enforce read-only mode.
  return FALSE;
}


/**
 * Implements hook_search_api_server_load().
 *
 * Flag when a certain server should be enforcing read_only mode.
 *
 * @param \Drupal\search_api\Entity\Server[] $entities
 *   Array of Search API server entities.
 */
function acquia_search_search_api_server_load($entities) {
  // Get the coreService that will tell us the preferred core to use.
  $core_service = acquia_search_get_core_service();

  $acquia_servers = array_filter($entities, function ($server) {
    /** @var \Drupal\search_api\Entity\Server $server */
    $backend_config = $server->getBackendConfig();
    return !empty($backend_config['connector']) && $backend_config['connector'] == 'solr_acquia_connector';
  });

  foreach ($acquia_servers as $server_id => $server) {
    /** @var \Drupal\search_api\Entity\Server $server */
    $backend_config = $server->getBackendConfig();

    // Set a list of eligible cores.
    $backend_config['acquia_search_possible_cores'] = $core_service->getListOfPossibleCores();

    if (acquia_search_should_set_read_only_mode()) {
      $backend_config['overridden_by_acquia_search'] = ACQUIA_SEARCH_AUTO_OVERRIDE_READ_ONLY;
    }

    $server->setBackendConfig($backend_config);
  }
}

/**
 * Implements hook_search_api_index_load().
 *
 * This takes care of marking indexes as read-only mode under the right
 * conditions (@see acquia_search_search_api_server_load()).
 *
 * @param \Drupal\search_api\Entity\Index[] $entities
 *   Array of Search API index entities.
 */
//function acquia_search_search_api_index_load($entities) {
//  // Loop through the Index entities.
//  foreach ($entities as &$index) {
//    /** @var \Drupal\search_api\Entity\Index $index */
//
//    // Reset the overridden_by_acquia_search option.
//    $options = $index->getOptions();
//    if (!empty($options['overridden_by_acquia_search'])) {
//      unset($options['overridden_by_acquia_search']);
//      $index->setOptions($options);
//    }
//
//    // Look at the server settings to determine what to do.
//    if ($index->getServerId()) {
//      // Load server.
//      /** @var \Drupal\search_api\Entity\Server $server */
//      $server = Server::load($index->getServerId());
//      if ($server) {
//        // We will look at the backend config to see what actions to take, since
//        //   that has already been flagged by acquia_search_search_api_server_load()
//        // @todo: replace with acquia_search_should_we_set_read_only_mode()
//        $backend_config = $server->getBackendConfig();
//        if (
//          !empty($backend_config['connector'])
//          && $backend_config['connector'] == 'solr_acquia_connector'
//          && isset($backend_config['overridden_by_acquia_search'])
//          && $backend_config['overridden_by_acquia_search'] == ACQUIA_SEARCH_AUTO_OVERRIDE_READ_ONLY
//        ) {
//          // Set this index to read-only mode.
//          $index->set('read_only', TRUE);
//          // Flag this index as having been altered by this module.
//          $index->setOption('overridden_by_acquia_search', ACQUIA_SEARCH_AUTO_OVERRIDE_READ_ONLY);
//        }
//      }
//    }
//  }
//}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the Search API server's status form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
//function acquia_search_form_search_api_server_status_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//  if (!empty($form['#server'])) {
//    /** @var \Drupal\search_api\Entity\Server $server */
//    $server = $form['#server'];
//    // Verify if this object is actually a server class.
//    if (is_object($server) && get_class($server) == 'Drupal\search_api\Entity\Server') {
//      acquia_search_server_show_read_only_mode_warning($server);
//
//      // If this connection is set to read-only, disable the
//      //   "Delete all indexed data on this server" action.
//      if (acquia_search_should_set_read_only_mode($server->id())) {
//        $form['actions']['clear']['#disabled'] = TRUE;
//      }
//    }
//  }
//}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the Search API server's edit form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function acquia_search_form_search_api_server_edit_form_alter(&$form) {
  $server = Server::load($form['id']['#default_value']);

  if (!$server) {
    return;
  }

  acquia_search_server_show_read_only_mode_warning($server);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Shows message if we are editing a Search API server's configuration.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
//function acquia_search_form_search_api_index_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//  /** @var \Drupal\search_api\Entity\Server $server */
//  $server = Server::load($form['server']['#default_value']);
//  // Verify if this object is actually a server class.
//  if (is_object($server) && get_class($server) == 'Drupal\search_api\Entity\Server') {
//    acquia_search_server_show_read_only_mode_warning($server);
//
//    // If the server for this index is currently overridden by the module to be
//    //   read-only, then disable the 'read-only' checkbox on the index.
//    // @todo: replace with acquia_search_should_we_set_read_only_mode()
//    $backend_config = $server->getBackendConfig();
//    if (!empty($backend_config['overridden_by_acquia_search']) && $backend_config['overridden_by_acquia_search'] == ACQUIA_SEARCH_AUTO_OVERRIDE_READ_ONLY) {
//      // @TODO: Disabling the read-only checkbox doesn't prevent setting from being saved on a form submit.
//      $form['options']['read_only']['#disabled'] = TRUE;
//    }
//  }
//}

/**
 * If server has been marked as read-only, show a message.
 *
 * @param \Drupal\search_api\Entity\Server $server
 */
function acquia_search_server_show_read_only_mode_warning(Server $server) {
  if (acquia_search_is_server_marked_read_only($server)) {
    $message = acquia_search_get_read_only_mode_warning($server);
    drupal_set_message($message, 'warning');
  }
}

function acquia_search_is_server_marked_read_only(Server $server) {
  $backend_config = $server->getBackendConfig();
  return !empty($backend_config['overridden_by_acquia_search']) &&
    $backend_config['overridden_by_acquia_search'] === ACQUIA_SEARCH_AUTO_OVERRIDE_READ_ONLY;
}

/**
 * Returns formatted message about read-only mode.
 *
 * @param \Drupal\search_api\Entity\Server $server
 *   The Search API server.
 *
 * @return string
 */
function acquia_search_get_read_only_mode_warning(Server $server) {

  $msg = t('To protect your data, the Acquia Search module is enforcing 
    read-only mode on the Search API indexes, because it could not figure out what Acquia-hosted Solr 
    index to connect to. This helps you avoid writing to a production index 
    if you copy your site to a development or other environment(s).');

  $backend_config = $server->getBackendConfig();

  if (!empty($backend_config['acquia_search_possible_cores'])) {

    $item_list = array(
      '#theme' => 'item_list',
      '#items' => $backend_config['acquia_search_possible_cores'],
    );
    $list = render($item_list);

    $msg .= '<p>';
    $msg .= t('The following Acquia Search Solr index IDs would have worked for your current environment, but could not be found on your Acquia subscription: @list', array('@list' => $list));
    $msg .= '</p>';

  }

  $msg .= PHP_EOL . t('To fix this problem, please read <a href="@url">our documentation</a>.', array(
      '@url' => 'https://docs.acquia.com/acquia-search/multiple-cores'
    ));

  return Markup::create((string) $msg);

}

/**
 * Returns formatted message about Acquia Search connection details.
 *
 * @param \Drupal\search_api\Entity\Server $server
 * @return string
 */
function acquia_search_get_search_status_message(Server $server) {

  /** @var \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend $backend */
  $backend = $server->getBackend();
  $configuration = $backend->getSolrConnector()->getConfiguration();

  $url = $configuration['scheme'] . '://' . $configuration['host'] . ':' . $configuration['port'] . $configuration['path'];
  $items = array(
    t('search_api_solr.module server ID: @env', array('@env' => $server->id())),
    t('URL: @url', array('@url' => $url)),
  );

  // Report on the behavior chosen.
  // @todo: Should we use overridden_by_acquia_search from $server->backendConfig() or $server->getBackend()->solrConnector()->getConfiguration()?
  if (isset($configuration['overridden_by_acquia_search'])) {
    $override = $configuration['overridden_by_acquia_search'];
    switch ($override) {
      case ACQUIA_SEARCH_AUTO_OVERRIDE_READ_ONLY:
        $items[] = ['#markup' => '<span class="color-warning">' . t('Acquia Search module automatically enforced read-only mode on this connection.') . '</span>'];
        break;
      case ACQUIA_SEARCH_OVERRIDE_AUTO_SET:
        $items[] = t('Acquia Search module automatically selected the proper Solr connection based on the detected environment.');
        break;
      case ACQUIA_SEARCH_EXISTING_OVERRIDE:
        $items[] = ['#markup' => '<span class="color-warning">' . t('Acquia Search module used overrides set from the <strong>acquia_search.settings</strong> configuration object instead of automatically selecting an available Acquia Search Solr connection.') . '</span>'];
        break;
    }
  }

  // Ping the Solr index.
  if ($server->getBackend()->getSolrConnector()->pingCore()) {
    $items[] = t('Solr core is currently reachable and up.');
  }
  else {
    // Add message with error class.
    $items[] = array(
      '#markup' => '<span class="color-error">' . t('Solr index is currently unreachable.') . '</span>',
    );
  }

  // Deep-ping the Solr index to ensure authentication is working.
  if ($server->getBackend()->getSolrConnector()->pingServer()) {
    $items[] = t('Requests to Solr core are passing authentication checks.');
  }
  else {
    // Add message with error class.
    $items[] = array(
      '#markup' => '<span class="color-error">' . t('Solr core authentication check fails.') . '</span>',
    );
  }

  $list = ['#theme' => 'item_list', '#items' => $items];
  $list = render($list);
  $msg = t('Connection managed by Acquia Search module.') . $list;

  return Markup::create((string) $msg);
}

/**
 * Instantiates the PreferredSearchCoreService class to detect what Acquia
 * index ID from those available in the subscription should be used.
 *
 * @param bool $reset
 *   If true, resets internal cache.
 * @return \Drupal\acquia_search\PreferredSearchCoreService
 */
function acquia_search_get_core_service($reset = false) {
  static $core_service;

  if (isset($core_service) && !$reset) {
    return $core_service;
  }

  $acquia_identifier = Storage::getIdentifier();
  $ah_env = isset($_ENV['AH_SITE_ENVIRONMENT']) ? $_ENV['AH_SITE_ENVIRONMENT'] : '';
  $ah_site_name = isset($_ENV['AH_SITE_NAME']) ? $_ENV['AH_SITE_NAME'] : '';
  $ah_site_group = isset($_ENV['AH_SITE_GROUP']) ? $_ENV['AH_SITE_GROUP'] : '';
  $conf_path = \Drupal::service('site.path');
  $sites_foldername = substr($conf_path, strrpos($conf_path, '/') + 1);
  $ah_db_name = '';
  if ($ah_env && $ah_site_name && $ah_site_group) {
    $tmp = \Drupal\Core\Database\Database::getConnection()->getConnectionOptions();
    $ah_db_name = $tmp['database'];
  }

  $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');

  $available_cores = array();
  if (!empty($subscription['heartbeat_data']['search_cores'])) {
    $available_cores = $subscription['heartbeat_data']['search_cores'];
  }

  $core_service = new PreferredSearchCoreService($acquia_identifier, $ah_env, $sites_foldername, $ah_db_name, $available_cores);
  return $core_service;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Helps us alter some Search API status pages.
 *
 * @see acquia_search_theme_search_api_index()
 */
function acquia_search_theme_registry_alter(&$theme_registry) {
  $theme_registry['search_api_index']['function'] = 'acquia_search_theme_search_api_index';
  $theme_registry['search_api_server']['function'] = 'acquia_search_theme_search_api_server';
}

/**
 * Theme override function for Search API index status page.
 * @param array $variables
 * @return string
 *   Resulting HTML.
 *
 * @see acquia_search_theme_registry_alter()
 */
function acquia_search_theme_search_api_index($variables) {
  $output = '';
  /** @var \Drupal\search_api\Entity\Index $index */
  $index = $variables['index'];
  /** @var \Drupal\search_api\Entity\Server $server */
  $server = Server::load($index->get('server'));
  // Verify if this object is actually a server class.
  if (is_object($server) && get_class($server) == 'Drupal\search_api\Entity\Server') {
    acquia_search_server_show_read_only_mode_warning($server);
    $info_box = [
      '#type' => 'fieldset',
      '#title' => t('Acquia Search status for this connection'),
      '#markup' => acquia_search_get_search_status_message($server),
    ];
    $output .= render($info_box);
  }
  // Call the original theme_search_api_index() function
  $output .= theme_search_api_index($variables);
  return $output;
}

/**
 * Theme override function for Search API server status page.
 * @param array $variables
 * @return string
 *   Resulting HTML.
 *
 * @see acquia_search_theme_registry_alter()
 */
function acquia_search_theme_search_api_server($variables) {
  $output = '';

  /** @var \Drupal\search_api\Entity\Server $server */
  $server = $variables['server'];

  acquia_search_server_show_read_only_mode_warning($server);
  $info_box = [
    '#type' => 'fieldset',
    '#title' => t('Acquia Search status for this connection'),
    '#markup' => acquia_search_get_search_status_message($server),
  ];
  $output .= render($info_box);

  // Call the original theme_search_api_index() function
  $output .= theme_search_api_server($variables);
  return $output;
}
